{"version":3,"sources":["webpack:///./src/components/contact/contact.js","webpack:///./src/templates/default.js"],"names":["getResponseClass","responseText","classNames","contact__actions__response","expanded","FormActions","_ref","loading","submitBtnTxt","btnTxt","SUBMIT_BTNTXT_OK","content","react_default","a","createElement","index_es","className","icon","faSpinner","type","primary-btn","contact__actions__spinner","disabled","Contact","props","_this","_React$Component","call","this","handleSubmit","e","preventDefault","setState","form","target","errors","validateForm","length","data","FormData","sendToEmailService","handleChange","_this$setState","_e$target","name","value","state","company","job","email","message","push","NAME_IS_EMPTY","COMPANY_IS_EMPTY","EMAIL_IS_EMPTY","match","EMAIL_FORMAT_REGEX","EMAIL_IS_NOT_FORMATTED","MESSAGE_IS_EMPTY","_this2","fetch","FORM_SUBMIT_URL","method","mode","headers","Accept","Content-Type","Access-Control-Allow-Origin","body","then","response","resetFormAndSetResponse","CONTACT_FORM_RESPONSE_SUCCESS","catch","error","CONTACT_FORM_RESPONSE_FAILURE","getContactFormClass","showAddress","contact__form","contact__form--center","render","_this3","_this$props","pathname","location","_this$props$meta","meta","heading","description","address","elemId","_this$state","id","src","alt","title","onSubmit","noValidate","placeholder","namePlaceholder","maxLength","onChange","required","includes","NAME_IS_EMPTY_USER_ERROR","companyPlaceholder","COMPANY_IS_EMPTY_USER_ERROR","jobPlaceholder","emailPlaceholder","EMAIL_IS_EMPTY_USER_ERROR","EMAIL_IS_NOT_FORMATTED_USER_ERROR","messagePlaceholder","rows","MESSAGE_IS_EMPTY_USER_ERROR","contact_FormActions","style","display","faMapMarkerAlt","line1","line2","country","faEnvelope","React","Component","withLocation","withShowcase","DefaultTemplate","components","pageContext","layout","map","i","comName","toLowerCase","banner","key","grid","calltoaction","callToAction","contact","contact_contact","imagetext","imageText","cards","hero","pills","quartet","componentResolver","position"],"mappings":"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","file":"component---src-templates-default-js-f943160c0683afa97448.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faMapMarkerAlt,\n  faEnvelope,\n  faSpinner,\n} from '@fortawesome/free-solid-svg-icons'\nimport './contact.scss'\nimport withLocation from '../common/withLocation'\nimport withShowcase from '../common/withShowcase/withShowcase'\nimport {\n  COMPANY_IS_EMPTY,\n  COMPANY_IS_EMPTY_USER_ERROR,\n  CONTACT_FORM_RESPONSE_FAILURE,\n  CONTACT_FORM_RESPONSE_SUCCESS,\n  EMAIL_FORMAT_REGEX,\n  EMAIL_IS_EMPTY,\n  EMAIL_IS_EMPTY_USER_ERROR,\n  EMAIL_IS_NOT_FORMATTED,\n  EMAIL_IS_NOT_FORMATTED_USER_ERROR,\n  FORM_SUBMIT_URL,\n  MESSAGE_IS_EMPTY,\n  MESSAGE_IS_EMPTY_USER_ERROR,\n  NAME_IS_EMPTY,\n  NAME_IS_EMPTY_USER_ERROR,\n  SUBMIT_BTNTXT_OK,\n} from '../common/constants'\nimport classNames from 'classnames'\n\n/**\n * Utility to return classes for response area\n * @param responseText The response shown to the user after form submission\n * @returns {string}\n */\nconst getResponseClass = responseText =>\n  classNames({\n    contact__actions__response: true,\n    expanded: responseText,\n  })\n\n/**\n * Utility to return classes for submit button\n * @param loading Boolean while an AJAX call is in progress\n * @returns {string}\n */\nconst getSubmitButtonClass = () =>\n  classNames({\n    'primary-btn': true,\n    contact__actions__spinner: false,\n  })\n\n/**\n * The component that renders the form's actions bar. It contains the submit button and a message area\n * @param loading Boolean while an AJAX call is in progress\n * @param responseText The response shown to the user after form submission\n * @param submitBtnTxt User provided text of the submit button\n */\nconst FormActions = ({ loading, responseText, submitBtnTxt }) => {\n  const btnTxt = responseText ? SUBMIT_BTNTXT_OK : submitBtnTxt\n  const content = loading ? (\n    <FontAwesomeIcon className=\"contact__actions__spinner\" icon={faSpinner} />\n  ) : (\n    btnTxt\n  )\n  return (\n    <div className=\"contact__actions\">\n      <div className={getResponseClass(responseText)}>{responseText}</div>\n      <button\n        type=\"submit\"\n        className={getSubmitButtonClass(loading)}\n        disabled={loading}\n      >\n        {content}\n      </button>\n    </div>\n  )\n}\n\n/**\n * The class that renders the contact form\n */\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      name: '',\n      company: '',\n      job: '',\n      email: '',\n      message: '',\n      errors: [],\n      responseText: '',\n      loading: false,\n    }\n  }\n\n  /**\n   * Method to handle form submission. In the form data object\n   * there is also a hidden field with the route value.\n   * This is used so that we know what page the form was submitted from\n   * @param e React's synthetic event\n   * @param responseText The response shown to the user after form submission\n   */\n  handleSubmit = (e, responseText) => {\n    e.preventDefault()\n    if (responseText) {\n      this.setState({ responseText: '' })\n      return\n    }\n    const form = e.target\n    const errors = this.validateForm(form)\n    if (errors.length > 0) {\n      this.setState({ errors })\n    } else {\n      this.setState({ errors: [] })\n      const data = new FormData(form)\n      this.sendToEmailService(data)\n    }\n  }\n\n  /**\n   * Method to handle input change\n   * @param e React's synthetic event\n   */\n  handleChange = e => {\n    const { name, value } = e.target\n    this.setState({ [name]: value })\n  }\n\n  /**\n   * Method to validate form\n   * @param form The HTML form element\n   * @returns an array containing error strings\n   */\n  validateForm(form) {\n    let errors = []\n    !form.name.value && errors.push(NAME_IS_EMPTY)\n    !form.company.value && errors.push(COMPANY_IS_EMPTY)\n    !form.email.value && errors.push(EMAIL_IS_EMPTY)\n    form.email.value &&\n      !form.email.value.match(EMAIL_FORMAT_REGEX) &&\n      errors.push(EMAIL_IS_NOT_FORMATTED)\n    !form.message.value && errors.push(MESSAGE_IS_EMPTY)\n    return errors\n  }\n\n  /**\n   * Method used to submit contact for to an external email service\n   * @param data The form data\n   */\n  sendToEmailService(data) {\n    this.setState({ loading: true })\n    fetch(FORM_SUBMIT_URL, {\n      method: 'POST',\n      mode: 'no-cors',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      body: data,\n    })\n      .then(response => {\n        this.resetFormAndSetResponse(CONTACT_FORM_RESPONSE_SUCCESS)\n      })\n      .catch(error => {\n        this.resetFormAndSetResponse(CONTACT_FORM_RESPONSE_FAILURE)\n      })\n  }\n\n  getContactFormClass(showAddress) {\n    return classNames({\n      contact__form: true,\n      'contact__form--center': !showAddress,\n    })\n  }\n\n  resetFormAndSetResponse(responseText) {\n    this.setState({\n      responseText,\n      loading: false,\n      name: '',\n      email: '',\n      message: '',\n      company: '',\n      job: '',\n    })\n  }\n\n  render() {\n    const {\n      location: { pathname },\n      meta: { heading, icon, description, form, address, showAddress },\n      elemId,\n    } = this.props\n    const {\n      name,\n      email,\n      job,\n      company,\n      message,\n      errors,\n      responseText,\n      loading,\n    } = this.state\n    return (\n      <section id={elemId} className=\"contact\">\n        <div className=\"container\">\n          <div className=\"contact__header\">\n            {icon && <img src={`/icons/${icon}`} alt=\"\" />}\n            {heading && <h2 className=\"contact__header__heading\">{heading}</h2>}\n          </div>\n          {description && <p className=\"contact__description\">{description}</p>}\n          <div className=\"row contact__wrapper\">\n            <div className={this.getContactFormClass(showAddress)}>\n              {form.title && <h4 className=\"pb-15\">{form.title}</h4>}\n              <form\n                name=\"contactForm\"\n                onSubmit={e => this.handleSubmit(e, responseText)}\n                noValidate\n              >\n                <div className=\"mt-15\">\n                  <input\n                    name=\"name\"\n                    type=\"text\"\n                    placeholder={form.namePlaceholder}\n                    maxLength=\"120\"\n                    className=\"single-input\"\n                    onChange={this.handleChange}\n                    value={name}\n                    required\n                  />\n                  {errors.includes(NAME_IS_EMPTY) && (\n                    <small className=\"form-text text-danger\">\n                      {NAME_IS_EMPTY_USER_ERROR}\n                    </small>\n                  )}\n                </div>\n                <div className=\"mt-15\">\n                  <input\n                    name=\"company\"\n                    type=\"text\"\n                    placeholder={form.companyPlaceholder}\n                    maxLength=\"120\"\n                    className=\"single-input\"\n                    onChange={this.handleChange}\n                    value={company}\n                    required\n                  />\n                  {errors.includes(COMPANY_IS_EMPTY) && (\n                    <small className=\"form-text text-danger\">\n                      {COMPANY_IS_EMPTY_USER_ERROR}\n                    </small>\n                  )}\n                </div>\n                <div className=\"mt-15\">\n                  <input\n                    name=\"job\"\n                    type=\"text\"\n                    placeholder={form.jobPlaceholder}\n                    maxLength=\"120\"\n                    className=\"single-input\"\n                    onChange={this.handleChange}\n                    value={job}\n                    required\n                  />\n                </div>\n                <div className=\"mt-15\">\n                  <input\n                    type=\"email\"\n                    name=\"email\"\n                    placeholder={form.emailPlaceholder}\n                    maxLength=\"120\"\n                    className=\"single-input\"\n                    onChange={this.handleChange}\n                    value={email}\n                    required\n                  />\n                  {errors.includes(EMAIL_IS_EMPTY) && (\n                    <small className=\"form-text text-danger\">\n                      {EMAIL_IS_EMPTY_USER_ERROR}\n                    </small>\n                  )}\n                  {errors.includes(EMAIL_IS_NOT_FORMATTED) && (\n                    <small className=\"form-text text-danger\">\n                      {EMAIL_IS_NOT_FORMATTED_USER_ERROR}\n                    </small>\n                  )}\n                </div>\n                <div>\n                  <input type=\"hidden\" name=\"route\" value={pathname} />\n                </div>\n                <div className=\"mt-15 pb-25\">\n                  <textarea\n                    name=\"message\"\n                    placeholder={form.messagePlaceholder}\n                    maxLength=\"1000\"\n                    rows=\"5\"\n                    className=\"single-textarea\"\n                    onChange={this.handleChange}\n                    value={message}\n                    required\n                  />\n                  {errors.includes(MESSAGE_IS_EMPTY) && (\n                    <small className=\"form-text text-danger\">\n                      {MESSAGE_IS_EMPTY_USER_ERROR}\n                    </small>\n                  )}\n                </div>\n                <FormActions\n                  loading={loading}\n                  responseText={responseText}\n                  submitBtnTxt={form.submitBtnTxt}\n                />\n                <input\n                  name=\"_formsubmit_id\"\n                  type=\"text\"\n                  style={{ display: 'none' }}\n                />\n              </form>\n            </div>\n            {showAddress && (\n              <div className=\"contact__address\">\n                {address.title && <h4 className=\"pb-15\">{address.title}</h4>}\n                <div className=\"d-flex pt-15\">\n                  <div className=\"contact__address__icon\">\n                    <FontAwesomeIcon icon={faMapMarkerAlt} />\n                  </div>\n                  <div className=\"pl-30\">\n                    <div className=\"pb-10\">{address.line1}</div>\n                    <div className=\"pb-10\">{address.line2}</div>\n                    <div className=\"pb-10\">{address.country}</div>\n                  </div>\n                </div>\n                <div className=\"d-flex pt-15\">\n                  <div className=\"contact__address__icon\">\n                    <FontAwesomeIcon icon={faEnvelope} />\n                  </div>\n                  <div className=\"pl-30\">{address.email}</div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n    )\n  }\n}\n\nexport default withLocation(withShowcase(Contact))\n","import React from 'react'\nimport Layout from '../components/layout/layout'\nimport Banner from '../components/banner/banner'\nimport Grid from '../components/grid/grid'\nimport CallToAction from '../components/callToAction/callToAction'\nimport Contact from '../components/contact/contact'\nimport ImageText from '../components/imageText/imageText'\nimport Cards from '../components/cards/cards'\nimport Hero from '../components/hero/hero'\nimport Pills from '../components/pills/pills'\nimport Quartet from '../components/quartet/quartet'\n\n/**\n * Utility to resolve the component in use\n * @param meta Component's meta\n * @param elemId Section's id, used for anchoring\n * @param i Index used for mapping\n */\nconst componentResolver = (meta, elemId, i) => ({\n  banner: <Banner meta={meta} elemId={elemId} key={i} />,\n  grid: <Grid meta={meta} elemId={elemId} key={i} />,\n  calltoaction: <CallToAction meta={meta} elemId={elemId} key={i} />,\n  contact: <Contact meta={meta} elemId={elemId} key={i} />,\n  imagetext: <ImageText meta={meta} elemId={elemId} key={i} />,\n  cards: <Cards meta={meta} elemId={elemId} key={i} />,\n  hero: <Hero meta={meta} elemId={elemId} key={i} />,\n  pills: <Pills meta={meta} elemId={elemId} key={i} />,\n  quartet: <Quartet meta={meta} elemId={elemId} key={i} />,\n})\n\n/**\n * Component for laying out a default page\n * @param components\n */\nconst DefaultTemplate = ({ pageContext: { components } }) => (\n  <Layout>\n    {components.map((meta, i) => {\n      const comName = meta.name.toLowerCase()\n      const elemId = `${comName}${meta.position}`\n      return componentResolver(meta, elemId, i)[comName]\n    })}\n  </Layout>\n)\n\nexport default DefaultTemplate\n"],"sourceRoot":""}